@page "/"
@using ragchat.Models
@using ragchat.Services
@using Markdig
@using ragchat.Components.organisms
@inject IChatService ChatService
@inject ISessionService SessionService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer
@using Microsoft.Extensions.Logging
@inject ILogger<ChatPage> Logger

<PageTitle>RAG Chat</PageTitle>

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (Environment.IsDevelopment())
{
    <!-- デバッグ用Cookieテストパネル（開発環境のみ） -->
    <div style="position: fixed; top: 10px; right: 10px; z-index: 1000; background: white; border: 1px solid #ccc; padding: 10px; border-radius: 5px;">
        <h6>Cookie Debug</h6>
        <MudButton OnClick="TestCookieFunction" Variant="Variant.Outlined" Size="Size.Small">Test Cookie Functions</MudButton>
        <MudButton OnClick="CheckAllCookies" Variant="Variant.Outlined" Size="Size.Small">Check All Cookies</MudButton>
        <MudButton OnClick="TestSessionService" Variant="Variant.Outlined" Size="Size.Small">Test Session Service</MudButton>
    </div>
}

<ChatArea Messages="messages"
          ActiveSessionId="activeSessionId"
          Loading="loading"
          OnStartEdit="HandleStartEdit"
          OnSaveEdit="HandleSaveEdit"
          OnCancelEdit="HandleCancelEdit"
          OnEditKeyDown="HandleEditKeyDown"
          OnCopyMessage="HandleCopyMessage"
          RenderMarkdown="RenderMarkdown" />
<ChatInput @bind-TextFieldValue="inputValue"
           Loading="loading"
           OnSend="HandleSend"
           InputKeyDown="HandleInputKeyDown" />

@code {
    private List<Message> messages = new();
    private string inputValue = string.Empty;
    private string? activeSessionId;
    private bool loading = false;
    private string bindValue = string.Empty;

    [CascadingParameter] public Components.Layout.MainLayout? MainLayout { get; set; }

    // Cookie テスト用メソッド（開発環境のみ）
    private async Task TestCookieFunction()
    {
        try
        {
            Logger.LogInformation("Testing cookie functions...");
            
            // JavaScript関数の存在確認
            var isAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.cookieHelper !== 'undefined'");
            Logger.LogInformation("Cookie helper available: {Available}", isAvailable);
            Snackbar.Add($"Cookie helper available: {isAvailable}", isAvailable ? Severity.Success : Severity.Error);
            
            if (isAvailable)
            {
                // テスト用Cookieを設定
                await JSRuntime.InvokeVoidAsync("cookieHelper.setCookie", "test_cookie", "test_value", 1);
                
                // 設定したCookieを取得
                var value = await JSRuntime.InvokeAsync<string>("cookieHelper.getCookie", "test_cookie");
                Logger.LogInformation("Test cookie value: {Value}", value);
                Snackbar.Add($"Test cookie value: {value}", !string.IsNullOrEmpty(value) ? Severity.Success : Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Cookie test failed: {Message}", ex.Message);
            Snackbar.Add($"Cookie test failed: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task CheckAllCookies()
    {
        try
        {
            var allCookies = await JSRuntime.InvokeAsync<string>("eval", "document.cookie");
            Logger.LogInformation("All browser cookies: {Cookies}", allCookies);
            Snackbar.Add($"All cookies: {allCookies}", Severity.Info);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to check cookies: {Message}", ex.Message);
            Snackbar.Add($"Failed to check cookies: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task TestSessionService()
    {
        try
        {
            Logger.LogInformation("Testing SessionService...");
            
            var testSession = new Session
            {
                Id = "test-session-" + DateTime.Now.Ticks,
                CreatedAt = DateTime.Now,
                Label = "Test Session"
            };
            
            await SessionService.AddSessionAsync(testSession);
            Logger.LogInformation("Test session added");
            
            var sessions = await SessionService.GetSessionsAsync();
            Logger.LogInformation("Retrieved {Count} sessions", sessions.Count);
            
            Snackbar.Add($"SessionService test completed. {sessions.Count} sessions found.", Severity.Success);
            
            // MainLayoutのセッション一覧を更新
            if (MainLayout != null)
            {
                await MainLayout.RefreshSessionsAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "SessionService test failed: {Message}", ex.Message);
            Snackbar.Add($"SessionService test failed: {ex.Message}", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("ChatPage OnInitializedAsync called");
        // MainLayoutから現在のアクティブセッションIDを取得
        if (MainLayout != null)
        {
            activeSessionId = MainLayout.GetActiveSessionId();
            Logger.LogInformation("Initial active session: {SessionId}", activeSessionId ?? "null");
            if (!string.IsNullOrEmpty(activeSessionId))
            {
                await LoadConversationHistory();
            }
        }
    }

    private async Task LoadConversationHistory()
    {
        if (string.IsNullOrEmpty(activeSessionId)) return;

        Logger.LogInformation("Loading conversation history for session: {SessionId}", activeSessionId);
        try
        {
            messages = await ChatService.GetConversationHistoryAsync(activeSessionId);
            Logger.LogInformation("Loaded {Count} messages for session: {SessionId}", messages.Count, activeSessionId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "会話履歴の読み込みに失敗しました: {Message}", ex.Message);
            Snackbar.Add($"会話履歴の読み込みに失敗しました: {ex.Message}", Severity.Error);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // MainLayoutからアクティブセッションIDの変更を検知
        if (MainLayout != null)
        {
            var newActiveSessionId = MainLayout.GetActiveSessionId();
            if (newActiveSessionId != activeSessionId)
            {
                Logger.LogInformation("Active session changed from {OldSessionId} to {NewSessionId}", activeSessionId ?? "null", newActiveSessionId ?? "null");
                activeSessionId = newActiveSessionId;
                if (!string.IsNullOrEmpty(activeSessionId))
                {
                    await LoadConversationHistory();
                }
                else
                {
                    // 新規チャットの場合、メッセージをクリア
                    messages.Clear();
                    StateHasChanged();
                }
            }
        }
    }

    private async Task OnTextFieldValueChanged(string value)
    {
        inputValue = value;
        await Task.CompletedTask;
    }

    private async Task HandleSend()
    {
        Logger.LogInformation($"HandleSend called! inputValue: '{inputValue}'");
        if (string.IsNullOrWhiteSpace(inputValue)) return;

        loading = true;
        var originalMessages = new List<Message>(messages);
        
        try
        {
            var newMessage = new Message
            {
                Content = inputValue,
                IsUser = true,
                No = messages.Count + 1
            };
            messages.Add(newMessage);
            var currentInput = inputValue;
            inputValue = string.Empty;
            StateHasChanged();

            // SessionIDはリモート側で作成されるため、最初のメッセージ送信時はnullを送信
            var sessionIdToSend = activeSessionId; // nullの場合はnullがそのまま送信される
            Logger.LogInformation("Sending message with sessionId: {SessionId}", sessionIdToSend ?? "null");
            var response = await ChatService.SendMessageAsync(currentInput, sessionIdToSend);
            
            var aiMessage = new Message
            {
                Content = response.Content,
                IsUser = false,
                No = response.No
            };
            messages.Add(aiMessage);

            // セッションの処理
            var isNewSession = activeSessionId == null;
            activeSessionId = response.SessionId; // リモート側で作成されたSessionIDを受け取る
            Logger.LogInformation("Received sessionId from response: {SessionId}, isNewSession: {IsNewSession}", activeSessionId, isNewSession);

            // 新しいセッションの場合、Cookieに保存
            if (isNewSession && !string.IsNullOrEmpty(activeSessionId))
            {
                Logger.LogInformation("New session created: {SessionId}, saving to cookie", activeSessionId);
                await SaveSessionToCookie(currentInput);
                
                // MainLayoutのアクティブセッションを更新
                if (MainLayout != null)
                {
                    MainLayout.SetActiveSession(activeSessionId);
                    await MainLayout.RefreshSessionsAsync();
                    Logger.LogInformation("MainLayout updated with new session");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Message send failed: {Message}", ex.Message);
            Snackbar.Add($"エラーが発生しました: {ex.Message}", Severity.Error);
            messages = originalMessages;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task SaveSessionToCookie(string firstMessage)
    {
        if (string.IsNullOrEmpty(activeSessionId)) return;

        try
        {
            var session = new Session
            {
                Id = activeSessionId,
                CreatedAt = DateTime.Now,
                Label = GenerateSessionLabel(firstMessage)
            };

            Logger.LogInformation("Saving session to cookie: {SessionId}, Label: {Label}", session.Id, session.Label);
            await SessionService.AddSessionAsync(session);
            Logger.LogInformation("Session saved to cookie successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "セッションのCookie保存に失敗しました: {Message}", ex.Message);
        }
    }

    private string GenerateSessionLabel(string firstMessage)
    {
        // 最初のメッセージから適切な長さのラベルを生成
        const int maxLength = 30;
        var cleanMessage = firstMessage.Trim().Replace("\n", " ").Replace("\r", "");
        
        if (cleanMessage.Length <= maxLength)
        {
            return cleanMessage;
        }
        
        return cleanMessage.Substring(0, maxLength - 3) + "...";
    }

    private async Task HandleInputKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            Logger.LogInformation($"HandleInputKeyDown Enter called!");
            // TODO: 何故かこっちから呼ぶとテキストフィールドが初期化されない
            // await HandleSend();
            await Task.CompletedTask;
        }

    }

    private void HandleStartEdit(Message message)
    {
        message.IsEditing = true;
        message.EditValue = message.Content;
        StateHasChanged();
    }

    private async Task HandleSaveEdit(Message message)
    {
        if (activeSessionId == null) return;

        try
        {
            var messageIndex = messages.IndexOf(message);
            await ChatService.EditMessageAsync(activeSessionId, messageIndex, message.EditValue);
            message.Content = message.EditValue;
            message.IsEditing = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"メッセージの編集に失敗しました: {ex.Message}", Severity.Error);
        }
    }

    private void HandleCancelEdit(Message message)
    {
        message.IsEditing = false;
        message.EditValue = message.Content;
        StateHasChanged();
    }

    private async Task HandleEditKeyDown((KeyboardEventArgs e, Message message) param)
    {
        if (param.e.Key == "Enter" && !param.e.ShiftKey)
        {
            await HandleSaveEdit(param.message);
        }
    }

    private async Task HandleCopyMessage(string content)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", content);
            Snackbar.Add("コピーしました", Severity.Success);
        }
        catch
        {
            Snackbar.Add("コピーに失敗しました", Severity.Error);
        }
    }

    private string RenderMarkdown(string content)
    {
        try
        {
            var pipeline = new MarkdownPipelineBuilder()
                .UseAdvancedExtensions()
                .Build();
            
            return Markdown.ToHtml(content, pipeline);
        }
        catch
        {
            return content.Replace("**", "<strong>").Replace("**", "</strong>")
                         .Replace("*", "<em>").Replace("*", "</em>")
                         .Replace("\n", "<br>");
        }
    }
} 