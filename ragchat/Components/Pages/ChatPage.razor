@page "/"
@using ragchat.Models
@using ragchat.Services
@using Markdig
@using ragchat.Components.organisms
@using ragchat.Components.molecules
@inject IChatService ChatService
@inject ISessionService SessionService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer
@using Microsoft.Extensions.Logging
@inject ILogger<ChatPage> Logger

@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>RAG Chat</PageTitle>


<div class="sidebar">
    <NavMenu Sessions="Sessions" ActiveSessionId="@activeSessionId" ActiveSessionIdChanged="HandleActiveSessionIdChanged" SessionsChanged="HandleSessionsChanged" MessagesCleared="HandleMessagesCleared" UserId="@currentUserId" />
</div>

<main>
    <div class="top-row">
        <div class="chatHeader">
            <span class="logo">LocalRAG Chat</span>
        </div>
        <div class="nav-item px-3">
            <LogInOrOut />
        </div>
    </div>
    <article class="content">
        <ChatArea Messages="messages"
                ActiveSessionId="@activeSessionId"
                Loading="loading"
                OnStartEdit="HandleStartEdit"
                OnSaveEdit="HandleSaveEdit"
                OnCancelEdit="HandleCancelEdit"
                OnEditKeyDown="HandleEditKeyDown"
                OnCopyMessage="HandleCopyMessage"
                RenderMarkdown="RenderMarkdown" />
        <ChatInput @bind-TextFieldValue="inputValue"
                Loading="loading"
                OnSend="HandleSend"
                InputKeyDown="HandleInputKeyDown" />

    </article>
</main>

@code {
    private List<Session>? Sessions { get; set; }
    private List<Message> messages = new();
    private string inputValue = string.Empty;
    private string activeSessionId = string.Empty;
    private bool loading = false;
    private string bindValue = string.Empty;
    private string? currentUserId;


    [CascadingParameter] public Components.Layout.MainLayout? MainLayout { get; set; }

    private async Task HandleActiveSessionIdChanged(string sessionId)
    {
        Logger.LogInformation("HandleActiveSessionIdChanged called: {SessionId}", sessionId);
        activeSessionId = sessionId;
        await LoadConversationHistory();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("ChatPage OnInitializedAsync called");
        
        await Task.CompletedTask;
    }

    private async Task LoadConversationHistory()
    {
        if (string.IsNullOrEmpty(activeSessionId)){
            messages.Clear();
            StateHasChanged();
            return;
        }

        Logger.LogInformation("Loading conversation history for session: {SessionId}", activeSessionId);
        try
        {
            var userId = await GetCurrentUserId();
            if (!string.IsNullOrEmpty(userId))
            {
                messages = await ChatService.GetConversationHistoryAsync(userId, activeSessionId);
            }
            Logger.LogInformation("Loaded {Count} messages for session: {SessionId}", messages.Count, activeSessionId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "会話履歴の読み込みに失敗しました: {Message}", ex.Message);
            Snackbar.Add($"会話履歴の読み込みに失敗しました: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnTextFieldValueChanged(string value)
    {
        inputValue = value;
        await Task.CompletedTask;
    }

    private async Task HandleSend()
    {
        Logger.LogInformation($"HandleSend called! inputValue: '{inputValue}'");
        if (string.IsNullOrWhiteSpace(inputValue)) return;
        
        var currentInput = inputValue;
        inputValue = string.Empty;
        StateHasChanged();

        loading = true;
        var originalMessages = new List<Message>(messages);
        
        try
        {
            var newMessage = new Message
            {
                Content = currentInput,
                IsUser = true,
                No = messages.Count + 1
            };
            messages.Add(newMessage);

            // SessionIDはリモート側で作成されるため、最初のメッセージ送信時はnullを送信
            var sessionIdToSend = activeSessionId; // nullの場合はnullがそのまま送信される
            Logger.LogInformation("Sending message with sessionId: {SessionId}", sessionIdToSend ?? "null");
            var userId = await GetCurrentUserId();
            if (string.IsNullOrEmpty(userId))
            {
                throw new InvalidOperationException("User ID is required but not available");
            }
            var response = await ChatService.SendMessageAsync(currentInput, userId, sessionIdToSend);
            
            var aiMessage = new Message
            {
                Content = response.Content,
                IsUser = false,
                No = response.No
            };
            messages.Add(aiMessage);

            // セッションの処理
            var isNewSession = string.IsNullOrEmpty(activeSessionId);
            activeSessionId = response.SessionId; // リモート側で作成されたSessionIDを受け取る
            Logger.LogInformation("Received sessionId from response: {SessionId}, isNewSession: {IsNewSession}", activeSessionId, isNewSession);

            // 新しいセッションの場合、セッション一覧を更新
            if (isNewSession && !string.IsNullOrEmpty(activeSessionId))
            {
                Logger.LogInformation("New session created: {SessionId}, refreshing session list", activeSessionId);
                Sessions = await SessionService.GetSessionsAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Message send failed: {Message}", ex.Message);
            Snackbar.Add($"エラーが発生しました: {ex.Message}", Severity.Error);
            messages = originalMessages;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task HandleInputKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            Logger.LogInformation($"HandleInputKeyDown Enter called!");
            // TODO: 何故かこっちから呼ぶとテキストフィールドが初期化されない
            // await HandleSend();
            await Task.CompletedTask;
        }

    }

    private void HandleStartEdit(Message message)
    {
        message.IsEditing = true;
        message.EditValue = message.Content;
        StateHasChanged();
    }

    private async Task HandleSaveEdit(Message message)
    {
        if (string.IsNullOrEmpty(activeSessionId)) return;

        try
        {
            var messageIndex = messages.IndexOf(message);
            var userId = await GetCurrentUserId();
            if (!string.IsNullOrEmpty(userId))
            {
                await ChatService.EditMessageAsync(userId, activeSessionId, messageIndex, message.EditValue);
            }
            message.Content = message.EditValue;
            message.IsEditing = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"メッセージの編集に失敗しました: {ex.Message}", Severity.Error);
        }
    }

    private void HandleCancelEdit(Message message)
    {
        message.IsEditing = false;
        message.EditValue = message.Content;
        StateHasChanged();
    }

    private async Task HandleEditKeyDown((KeyboardEventArgs e, Message message) param)
    {
        if (param.e.Key == "Enter" && !param.e.ShiftKey)
        {
            await HandleSaveEdit(param.message);
        }
    }

    private async Task HandleCopyMessage(string content)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", content);
            Snackbar.Add("コピーしました", Severity.Success);
        }
        catch
        {
            Snackbar.Add("コピーに失敗しました", Severity.Error);
        }
    }

    private async Task HandleSessionsChanged(List<Session> sessions)
    {
        Sessions = sessions;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private string RenderMarkdown(string content)
    {
        try
        {
            var pipeline = new MarkdownPipelineBuilder()
                .UseAdvancedExtensions()
                .Build();
            
            return Markdown.ToHtml(content, pipeline);
        }
        catch
        {
            return content.Replace("**", "<strong>").Replace("**", "</strong>")
                         .Replace("*", "<em>").Replace("*", "</em>")
                         .Replace("\n", "<br>");
        }
    }
    private async Task HandleMessagesCleared()
    {
        messages.Clear();
        StateHasChanged();
        await Task.CompletedTask;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("ChatPage first render completed");
            
            Sessions = await SessionService.GetSessionsAsync();
            currentUserId = await GetCurrentUserId();
            
            StateHasChanged();
        }
        await Task.CompletedTask;
    }
    private async Task<string?> GetCurrentUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        // ユーザーIDを取得（クレームから）
        return user.FindFirst("sub")?.Value ?? 
               user.FindFirst("nameidentifier")?.Value ?? 
               user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
    }
} 