@inherits LayoutComponentBase

@using ragchat.Models
@using ragchat.Services
@using ragchat.Components.organisms
@using System.Security.Claims

@inject IChatService ChatService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject CustomAuthenticationService AuthService
@inject ILogger<MainLayout> Logger

<div class="page">
    <AuthorizeView>
        <Authorized>
            <div class="sidebar">
                <NavMenu Sessions="sessions"
                        ActiveSessionId="activeSessionId"
                        OnSessionSelect="HandleSessionSelect"
                        OnDeleteSession="HandleDeleteSession"
                        OnNewChat="HandleNewChat"
                        OnToggle="ToggleSidebar" />
            </div>

            <main>
                <div class="top-row px-4">
                    <div class="chatHeader">
                        <span class="logo">LocalRAG Chat</span>
                        <div class="user-info">
                            <span>@context.User.Identity?.Name</span>
                            <MudButton OnClick="SignOut" 
                                        Variant="Variant.Text" 
                                        Color="Color.Primary"
                                        Size="Size.Small">
                                „É≠„Ç∞„Ç¢„Ç¶„Éà
                            </MudButton>
                        </div>
                    </div>
                </div>
                <article class="content">
                    @Body
                </article>
            </main>
        </Authorized>
        <NotAuthorized>
            <div class="login-main">
                <Login />
            </div>
        </NotAuthorized>
    </AuthorizeView>

</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">üóô</a>
</div>

@code {
    private List<Session> sessions = new();
    private string? activeSessionId;
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated != true && !NavigationManager.Uri.Contains("/login"))
        {
            Logger.LogInformation("„É≠„Ç∞„Ç§„É≥„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å´„É™„ÉÄ„Ç§„É¨„ÇØ„Éà„Åó„Åæ„Åô„ÄÇ");
            NavigationManager.NavigateTo("/login", true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !loaded)
        {
            var sessionsJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "sessions");
            if (!string.IsNullOrEmpty(sessionsJson))
            {
                sessions = System.Text.Json.JsonSerializer.Deserialize<List<Session>>(sessionsJson) ?? new List<Session>();
                if (sessions.Any())
                {
                    activeSessionId = sessions.First().Id;
                }
            }
            loaded = true;
            StateHasChanged();
        }
    }

    private void HandleSessionSelect(string sessionId)
    {
        activeSessionId = sessionId;
        StateHasChanged();
    }
    private async Task HandleDeleteSession(string sessionId)
    {
        sessions.RemoveAll(s => s.Id == sessionId);
        await SaveSessions();
        StateHasChanged();
    }
    private async Task HandleNewChat()
    {
        // Êñ∞Ë¶è„ÉÅ„É£„ÉÉ„Éà‰ΩúÊàêÊôÇ„ÅÆÂá¶ÁêÜ
        await SaveSessions();
        StateHasChanged();
    }
    private void ToggleSidebar()
    {
        StateHasChanged();
    }
    private async Task SaveSessions()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(sessions);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "sessions", json);
    }

    private async Task SignOut()
    {
        await AuthService.SignOutAsync();
        NavigationManager.NavigateTo("/login", true);
    }
}
