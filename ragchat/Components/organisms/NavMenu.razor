@using ragchat.Models
@using ragchat.Services
@inject ILogger<NavMenu> Logger
@inject ISessionService SessionService
@inject IChatService ChatService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="navmenu-main @(isMenuOpen ? "navmenu-main-open" : "navmenu-main-closed")">
@if (isMenuOpen)
{
    <div class="sidebarHeader">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" 
                    OnClick="@OnToggle"
                    Color="Color.Inherit"
                    Size="Size.Small" />
        <div style="flex: 1;"></div>
        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                    Color="Color.Inherit"
                    Size="Size.Small"
                    OnClick="@OnNewChat" />
    </div>
    <div class="sidebarItems">
        @if (Sessions != null && Sessions.Any())
        {
            @foreach (var session in Sessions)
            {
                <div class="sidebarItem @(session.Id == ActiveSessionId ? "active" : "")" onclick="@(() => HandleSessionClick(session.Id))">
                        <span class="label">@session.Label</span>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                    OnClick="@(() => HandleDeleteClick(session.Id))"
                                    Color="Color.Inherit"
                                    Size="Size.Small" />
                </div>
            }
        }
        else if (Sessions != null)
        {
            <div class="sidebarItem" style="color: #666; font-style: italic; padding: 10px;">
                No sessions yet. Start a new chat!
            </div>
        }
        else
        {
            <div class="sidebarItem" style="color: #666; font-style: italic; padding: 10px;">
                Loading sessions...
            </div>
        }
    </div>
}else{
    <div class="sidebarHeader">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" 
                        OnClick="@OnToggle"
                        Color="Color.Inherit"
                        Size="Size.Small" />
    </div>
}
</div>

@code {
    [Parameter] public required List<Session> Sessions { get; set; }
    [Parameter] public EventCallback<List<Session>> SessionsChanged { get; set; }
    [Parameter] public required string ActiveSessionId { get; set; }
    [Parameter] public EventCallback<string> ActiveSessionIdChanged { get; set; }
    [Parameter] public EventCallback MessagesCleared { get; set; }
    [Parameter] public string? UserId { get; set; }

    private bool isMenuOpen = true;

    private async Task HandleSessionClick(string sessionId)
    {
        Logger.LogInformation("Session clicked: {SessionId}", sessionId);
        await ActiveSessionIdChanged.InvokeAsync(sessionId);
    }

    private async Task HandleDeleteClick(string sessionId)
    {
        Logger.LogInformation("Delete button clicked for session: {SessionId}", sessionId);
        if (Sessions != null){
            await SessionService.DeleteSessionAsync(sessionId);
            Sessions.RemoveAll(s => s.Id == sessionId);
            await SessionsChanged.InvokeAsync(Sessions);
        }
        if (!string.IsNullOrEmpty(UserId))
        {
            await ChatService.DeleteAllMessagesAsync(UserId, sessionId);
        }
        if (ActiveSessionId == sessionId){
            Logger.LogInformation("Active session changed to empty");
            await ActiveSessionIdChanged.InvokeAsync(string.Empty);
            await MessagesCleared.InvokeAsync();
        }else{
            Logger.LogInformation("Active session is not the same as the session to be deleted. Active session: {ActiveSessionId}, Session to be deleted: {SessionId}", ActiveSessionId, sessionId);
        }
        StateHasChanged();
    }

    private async Task OnToggle()
    {
        Logger.LogInformation("Toggle button clicked");
        isMenuOpen = !isMenuOpen;

        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task OnNewChat()
    {
        Logger.LogInformation("New chat button clicked");
        await ActiveSessionIdChanged.InvokeAsync(string.Empty);
    }

}

