@using Microsoft.Extensions.Logging
@using ragchat.Components.Atoms
@inject ILogger<ChatInput> Logger
@rendermode InteractiveServer

<div class="chatInputArea">
    
    <AutoResizeTextArea @ref="textAreaRef"
                        Value="@TextFieldValue"
                        ValueChanged="OnTextFieldValueChanged"
                        OnEnterPressed="OnSendMessage"
                        OnKeyDown="OnInputKeyDown"
                        Placeholder="メッセージを入力... (Shift+Enterで改行)"
                        CssClass="chatInputBox" />

    <MudIconButton Icon="@Icons.Material.Filled.Send"
                  OnClick="@OnSend"
                  Disabled="@IsDisabled"
                  Color="Color.Primary" />
</div>

@code {
    [Parameter] public string TextFieldValue { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> TextFieldValueChanged { get; set; }
    [Parameter] public bool Loading { get; set; }
    [Parameter] public EventCallback OnSend { get; set; }
    [Parameter] public EventCallback<KeyboardEventArgs> InputKeyDown { get; set; }
    
    private bool IsDisabled => string.IsNullOrWhiteSpace(TextFieldValue);
    private AutoResizeTextArea? textAreaRef;

    private async Task OnTextFieldValueChanged(string value)
    {
        await TextFieldValueChanged.InvokeAsync(value);
    }

    private async Task OnInputKeyDown(KeyboardEventArgs e)
    {
        await InputKeyDown.InvokeAsync(e);
    }

    private async Task OnSendMessage(string message)
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            // メッセージ内容を一時保持
            var messageToSend = message;
            
            // エンターキーが押された瞬間にテキストエリアをクリア
            if (textAreaRef is not null)
            {
                await textAreaRef.ClearAsync();
            }
            
            // 実際のメッセージ内容をinputValueに設定してから送信
            await TextFieldValueChanged.InvokeAsync(messageToSend);
            StateHasChanged();
            
            // 送信処理を実行
            await OnSend.InvokeAsync();
            
            // 送信後、inputValueを空にする
            await TextFieldValueChanged.InvokeAsync(string.Empty);
            StateHasChanged();
        }
    }

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        if(TextFieldValue.Length == 0 && textAreaRef is not null){
            await textAreaRef.FocusAsync();
        }
    }
}